/*
Custom License for kfoozminus Projects
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	kfoozminuscomv1 "github.com/kfoozminus/booklist-crd/pkg/apis/kfoozminus.com/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePodjennies implements PodjennyInterface
type FakePodjennies struct {
	Fake *FakeKfoozminusV1
	ns   string
}

var podjenniesResource = schema.GroupVersionResource{Group: "kfoozminus.com", Version: "v1", Resource: "podjennies"}

var podjenniesKind = schema.GroupVersionKind{Group: "kfoozminus.com", Version: "v1", Kind: "Podjenny"}

// Get takes name of the podjenny, and returns the corresponding podjenny object, and an error if there is any.
func (c *FakePodjennies) Get(name string, options v1.GetOptions) (result *kfoozminuscomv1.Podjenny, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(podjenniesResource, c.ns, name), &kfoozminuscomv1.Podjenny{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kfoozminuscomv1.Podjenny), err
}

// List takes label and field selectors, and returns the list of Podjennies that match those selectors.
func (c *FakePodjennies) List(opts v1.ListOptions) (result *kfoozminuscomv1.PodjennyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(podjenniesResource, podjenniesKind, c.ns, opts), &kfoozminuscomv1.PodjennyList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &kfoozminuscomv1.PodjennyList{ListMeta: obj.(*kfoozminuscomv1.PodjennyList).ListMeta}
	for _, item := range obj.(*kfoozminuscomv1.PodjennyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested podjennies.
func (c *FakePodjennies) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(podjenniesResource, c.ns, opts))

}

// Create takes the representation of a podjenny and creates it.  Returns the server's representation of the podjenny, and an error, if there is any.
func (c *FakePodjennies) Create(podjenny *kfoozminuscomv1.Podjenny) (result *kfoozminuscomv1.Podjenny, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(podjenniesResource, c.ns, podjenny), &kfoozminuscomv1.Podjenny{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kfoozminuscomv1.Podjenny), err
}

// Update takes the representation of a podjenny and updates it. Returns the server's representation of the podjenny, and an error, if there is any.
func (c *FakePodjennies) Update(podjenny *kfoozminuscomv1.Podjenny) (result *kfoozminuscomv1.Podjenny, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(podjenniesResource, c.ns, podjenny), &kfoozminuscomv1.Podjenny{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kfoozminuscomv1.Podjenny), err
}

// Delete takes name of the podjenny and deletes it. Returns an error if one occurs.
func (c *FakePodjennies) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(podjenniesResource, c.ns, name), &kfoozminuscomv1.Podjenny{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePodjennies) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(podjenniesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &kfoozminuscomv1.PodjennyList{})
	return err
}

// Patch applies the patch and returns the patched podjenny.
func (c *FakePodjennies) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *kfoozminuscomv1.Podjenny, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(podjenniesResource, c.ns, name, pt, data, subresources...), &kfoozminuscomv1.Podjenny{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kfoozminuscomv1.Podjenny), err
}
