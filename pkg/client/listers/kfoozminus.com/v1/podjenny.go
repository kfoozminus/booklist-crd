/*
Custom License for kfoozminus Projects
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kfoozminus/booklist-crd/pkg/apis/kfoozminus.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodjennyLister helps list Podjennies.
type PodjennyLister interface {
	// List lists all Podjennies in the indexer.
	List(selector labels.Selector) (ret []*v1.Podjenny, err error)
	// Podjennies returns an object that can list and get Podjennies.
	Podjennies(namespace string) PodjennyNamespaceLister
	PodjennyListerExpansion
}

// podjennyLister implements the PodjennyLister interface.
type podjennyLister struct {
	indexer cache.Indexer
}

// NewPodjennyLister returns a new PodjennyLister.
func NewPodjennyLister(indexer cache.Indexer) PodjennyLister {
	return &podjennyLister{indexer: indexer}
}

// List lists all Podjennies in the indexer.
func (s *podjennyLister) List(selector labels.Selector) (ret []*v1.Podjenny, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Podjenny))
	})
	return ret, err
}

// Podjennies returns an object that can list and get Podjennies.
func (s *podjennyLister) Podjennies(namespace string) PodjennyNamespaceLister {
	return podjennyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodjennyNamespaceLister helps list and get Podjennies.
type PodjennyNamespaceLister interface {
	// List lists all Podjennies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Podjenny, err error)
	// Get retrieves the Podjenny from the indexer for a given namespace and name.
	Get(name string) (*v1.Podjenny, error)
	PodjennyNamespaceListerExpansion
}

// podjennyNamespaceLister implements the PodjennyNamespaceLister
// interface.
type podjennyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Podjennies in the indexer for a given namespace.
func (s podjennyNamespaceLister) List(selector labels.Selector) (ret []*v1.Podjenny, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Podjenny))
	})
	return ret, err
}

// Get retrieves the Podjenny from the indexer for a given namespace and name.
func (s podjennyNamespaceLister) Get(name string) (*v1.Podjenny, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("podjenny"), name)
	}
	return obj.(*v1.Podjenny), nil
}
